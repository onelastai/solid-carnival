<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Memora - AI Memory & Knowledge Management | OneLast.AI</title>
  
  <%= csrf_meta_tags %>
  <%= csp_meta_tag %>
  
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'JetBrains Mono', 'Consolas', 'Monaco', monospace;
      background: linear-gradient(135deg, #1e1b3d 0%, #2d1b4e 25%, #4a1e4a 50%, #2d1b4e 75%, #1e1b3d 100%);
      color: #c9a9ff;
      min-height: 100vh;
      overflow-x: hidden;
      position: relative;
      animation: backgroundShift 30s ease-in-out infinite;
    }

    @keyframes backgroundShift {
      0%, 100% { filter: hue-rotate(0deg) brightness(1); }
      25% { filter: hue-rotate(10deg) brightness(1.1); }
      50% { filter: hue-rotate(-5deg) brightness(0.9); }
      75% { filter: hue-rotate(15deg) brightness(1.05); }
    }
    
    /* Memory particle effect */
    body::before {
      content: '';
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: radial-gradient(2px 2px at 20px 30px, #6B46C1, transparent),
                  radial-gradient(2px 2px at 40px 70px, #9333EA, transparent),
                  radial-gradient(1px 1px at 90px 40px, #C084FC, transparent),
                  radial-gradient(1px 1px at 130px 80px, #8B5CF6, transparent);
      background-repeat: repeat;
      background-size: 200px 200px;
      pointer-events: none;
      z-index: 1;
      animation: memorySpark 15s linear infinite;
    }
    
    @keyframes memorySpark {
      0% { transform: translate(0, 0); opacity: 0.3; }
      50% { opacity: 0.1; }
      100% { transform: translate(-200px, -200px); opacity: 0.3; }
    }

    /* Sticky Header Bar */
    .header-bar {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      height: 70px;
      background: linear-gradient(135deg, rgba(30, 27, 61, 0.95) 0%, rgba(45, 27, 78, 0.9) 100%);
      border-bottom: 2px solid #6B46C1;
      backdrop-filter: blur(15px);
      z-index: 3000;
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 0 2rem;
      box-shadow: 0 2px 20px rgba(107, 70, 193, 0.3);
    }

    .header-title {
      color: #c9a9ff;
      font-size: 1.5rem;
      font-weight: bold;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    /* Navigation Container */
    .nav-container {
      display: flex;
      align-items: center;
      gap: 1rem;
      position: relative;
    }

    /* Primary Menu (Right Arrow) */
    .primary-menu {
      position: relative;
      z-index: 3100;
    }

    .primary-menu-btn {
      background: linear-gradient(135deg, #6B46C1, #9333EA);
      border: none;
      width: 50px;
      height: 50px;
      border-radius: 50%;
      color: white;
      font-size: 1.2rem;
      cursor: pointer;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      justify-content: center;
      box-shadow: 0 4px 15px rgba(107, 70, 193, 0.4);
    }

    .primary-menu-btn:hover {
      transform: scale(1.1) rotate(90deg);
      box-shadow: 0 6px 25px rgba(107, 70, 193, 0.6);
    }

    .primary-menu-dropdown {
      position: absolute;
      top: 100%;
      right: 0;
      min-width: 180px;
      background: rgba(30, 27, 61, 0.98);
      border: 2px solid #6B46C1;
      border-radius: 12px;
      backdrop-filter: blur(20px);
      box-shadow: 0 10px 40px rgba(0, 0, 0, 0.5);
      opacity: 0;
      visibility: hidden;
      transform: translateY(-10px);
      transition: all 0.3s ease;
      margin-top: 1rem;
      z-index: 3200;
    }

    .primary-menu-dropdown.active {
      opacity: 1;
      visibility: visible;
      transform: translateY(0);
    }

    .primary-menu-item {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      padding: 0.75rem 1rem;
      color: #c9a9ff;
      text-decoration: none;
      transition: all 0.3s ease;
      border-bottom: 1px solid rgba(107, 70, 193, 0.1);
      cursor: pointer;
      font-size: 0.9rem;
    }

    .primary-menu-item:hover {
      background: rgba(107, 70, 193, 0.1);
      color: #f3e8ff;
      transform: translateX(5px);
    }

    .primary-menu-item:last-child {
      border-bottom: none;
      border-radius: 0 0 10px 10px;
    }

    /* Memora Agent Navigation */
    .memora-nav {
      position: relative;
      z-index: 3000;
      transition: all 0.3s ease;
    }

    .memora-nav.hidden-behind-primary {
      z-index: 2900;
      opacity: 0.3;
      pointer-events: none;
    }
    
    .memora-dropdown {
      position: relative;
    }
    
    .memora-menu-btn {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.75rem 1rem;
      background: rgba(30, 27, 61, 0.95);
      border: 2px solid #6B46C1;
      border-radius: 12px;
      color: #c9a9ff;
      font-size: 1rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      font-family: inherit;
      backdrop-filter: blur(15px);
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
    }
    
    .memora-menu-btn:hover {
      color: #f3e8ff;
      transform: scale(1.05);
    }
    
    .memora-dropdown-menu {
      position: absolute;
      top: 100%;
      right: 0;
      min-width: 280px;
      background: rgba(30, 27, 61, 0.98);
      border: 2px solid #6B46C1;
      border-radius: 12px;
      backdrop-filter: blur(20px);
      box-shadow: 0 10px 40px rgba(0, 0, 0, 0.4);
      opacity: 0;
      visibility: hidden;
      transform: translateY(-10px);
      transition: all 0.3s ease;
      margin-top: 0.5rem;
    }
    
    .memora-dropdown-menu.active {
      opacity: 1;
      visibility: visible;
      transform: translateY(0);
    }
    
    .memora-menu-header {
      padding: 1rem;
      border-bottom: 1px solid rgba(107, 70, 193, 0.3);
      text-align: center;
    }
    
    .memora-menu-title {
      font-size: 1.1rem;
      font-weight: bold;
      color: #f3e8ff;
      margin-bottom: 0.25rem;
    }
    
    .memora-menu-subtitle {
      font-size: 0.8rem;
      color: #c9a9ff;
      opacity: 0.8;
    }
    
    .memora-menu-item {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      padding: 0.75rem 1rem;
      color: #c9a9ff;
      text-decoration: none;
      transition: all 0.3s ease;
      border-bottom: 1px solid rgba(107, 70, 193, 0.1);
      cursor: pointer;
    }
    
    .memora-menu-item:hover {
      background: rgba(107, 70, 193, 0.1);
      color: #f3e8ff;
      transform: translateX(5px);
    }
    
    .memora-menu-item:last-child {
      border-bottom: none;
      border-radius: 0 0 10px 10px;
    }

    /* Hero Section */
    .hero-section {
      padding: 8rem 2rem 4rem;
      text-align: center;
      background: radial-gradient(ellipse at center, rgba(107, 70, 193, 0.1) 0%, rgba(0, 0, 0, 0.3) 70%);
      border-bottom: 2px solid #6B46C1;
      position: relative;
      z-index: 2;
    }
    
    .hero-section::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-image: 
        linear-gradient(rgba(107, 70, 193, 0.1) 1px, transparent 1px),
        linear-gradient(90deg, rgba(107, 70, 193, 0.1) 1px, transparent 1px);
      background-size: 20px 20px;
      opacity: 0.3;
      animation: gridMove 20s linear infinite;
    }
    
    @keyframes gridMove {
      0% { transform: translate(0, 0); }
      100% { transform: translate(10px, 10px); }
    }
    
    .hero-content {
      position: relative;
      z-index: 1;
    }
    
    .agent-logo {
      font-size: 4rem;
      margin-bottom: 1rem;
      text-shadow: 0 0 20px #6B46C1;
      animation: memoryPulse 3s infinite;
    }
    
    @keyframes memoryPulse {
      0%, 100% { transform: scale(1); opacity: 1; }
      50% { transform: scale(1.05); opacity: 0.9; text-shadow: 0 0 30px #6B46C1; }
    }
    
    .agent-title {
      font-size: 3rem;
      font-weight: bold;
      margin-bottom: 0.5rem;
      text-shadow: 0 0 10px #6B46C1;
      background: linear-gradient(45deg, #6B46C1, #C084FC);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }
    
    .agent-tagline {
      font-size: 1.2rem;
      color: #a78bfa;
      margin-bottom: 2rem;
      opacity: 0.9;
    }
    
    .agent-description {
      max-width: 600px;
      margin: 0 auto 2rem;
      color: #c9a9ff;
      line-height: 1.6;
      font-size: 1rem;
    }
    
    .agent-stats {
      display: flex;
      justify-content: center;
      gap: 2rem;
      margin-top: 2rem;
      flex-wrap: wrap;
    }
    
    .stat-item {
      background: rgba(107, 70, 193, 0.1);
      border: 1px solid #6B46C1;
      border-radius: 8px;
      padding: 1rem;
      min-width: 120px;
      text-align: center;
    }
    
    .stat-value {
      font-size: 1.5rem;
      font-weight: bold;
      color: #C084FC;
      display: block;
    }
    
    .stat-label {
      font-size: 0.8rem;
      color: #a78bfa;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    /* Start Memory Button */
    .hero-action {
      background: linear-gradient(135deg, #6B46C1 0%, #9333EA 50%, #8B5CF6 100%);
      border: none;
      padding: 1rem 2rem;
      border-radius: 25px;
      color: white;
      font-size: 1.1rem;
      font-weight: bold;
      cursor: pointer;
      transition: all 0.3s ease;
      margin-top: 2rem;
      text-transform: uppercase;
      letter-spacing: 1px;
    }

    .hero-action:hover {
      transform: translateY(-3px) scale(1.05);
      box-shadow: 0 10px 30px rgba(107, 70, 193, 0.6);
      filter: brightness(1.1);
    }

    /* Memory Interface Modal */
    .memory-modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.9);
      z-index: 4000;
      backdrop-filter: blur(10px);
    }

    .memory-container {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 90%;
      max-width: 1000px;
      background: linear-gradient(135deg, rgba(30, 27, 61, 0.95) 0%, rgba(45, 27, 78, 0.9) 100%);
      border: 2px solid #6B46C1;
      border-radius: 20px;
      padding: 2rem;
      backdrop-filter: blur(15px);
    }

    .memory-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 2rem;
      padding-bottom: 1rem;
      border-bottom: 1px solid rgba(107, 70, 193, 0.3);
    }

    .memory-title {
      color: #c9a9ff;
      font-size: 1.8rem;
      margin-bottom: 0.5rem;
    }

    .memory-subtitle {
      color: #a78bfa;
      font-size: 0.9rem;
    }

    .close-btn {
      background: #ef4444;
      border: none;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      color: white;
      font-size: 1.2rem;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .close-btn:hover {
      transform: scale(1.1);
    }

    /* Memory Interface Tabs */
    .memory-tabs {
      display: flex;
      gap: 0.5rem;
      margin-bottom: 1.5rem;
      border-bottom: 1px solid rgba(107, 70, 193, 0.2);
    }

    .memory-tab {
      padding: 0.75rem 1.5rem;
      background: transparent;
      border: none;
      color: #a78bfa;
      cursor: pointer;
      transition: all 0.3s ease;
      border-radius: 8px 8px 0 0;
      font-family: inherit;
    }

    .memory-tab.active {
      background: rgba(107, 70, 193, 0.2);
      color: #c9a9ff;
      border-bottom: 2px solid #6B46C1;
    }

    .memory-tab:hover {
      background: rgba(107, 70, 193, 0.1);
    }

    /* Memory Content Areas */
    .memory-content {
      display: none;
    }

    .memory-content.active {
      display: block;
    }

    /* Chat Interface */
    .memory-chat {
      height: 400px;
      display: flex;
      flex-direction: column;
    }

    .chat-messages {
      flex: 1;
      overflow-y: auto;
      margin-bottom: 1.5rem;
      padding: 1rem;
      background: rgba(0, 0, 0, 0.3);
      border-radius: 10px;
      border: 1px solid rgba(107, 70, 193, 0.2);
    }

    .chat-messages::-webkit-scrollbar {
      width: 8px;
    }

    .chat-messages::-webkit-scrollbar-track {
      background: rgba(107, 70, 193, 0.1);
    }

    .chat-messages::-webkit-scrollbar-thumb {
      background: #6B46C1;
      border-radius: 4px;
    }

    .message {
      margin-bottom: 1rem;
      padding: 1rem;
      border-radius: 10px;
      animation: fadeIn 0.3s ease;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }

    .message.user {
      background: rgba(147, 51, 234, 0.2);
      border-left: 3px solid #9333EA;
      margin-left: 2rem;
    }

    .message.ai {
      background: rgba(107, 70, 193, 0.1);
      border-left: 3px solid #6B46C1;
      margin-right: 2rem;
    }

    .message-header {
      font-weight: bold;
      margin-bottom: 0.5rem;
      font-size: 0.9rem;
    }

    .message.user .message-header {
      color: #9333EA;
    }

    .message.ai .message-header {
      color: #6B46C1;
    }

    .message-content {
      color: #a78bfa;
      line-height: 1.5;
      white-space: pre-wrap;
    }

    .chat-input-area {
      display: flex;
      gap: 1rem;
    }

    .chat-input {
      flex: 1;
      padding: 1rem;
      background: rgba(0, 0, 0, 0.5);
      border: 1px solid rgba(107, 70, 193, 0.3);
      border-radius: 10px;
      color: #c9a9ff;
      font-size: 1rem;
      font-family: inherit;
      resize: none;
      min-height: 60px;
    }

    .chat-input:focus {
      outline: none;
      border-color: #6B46C1;
    }

    .send-btn {
      background: linear-gradient(135deg, #6B46C1, #9333EA);
      border: none;
      border-radius: 10px;
      padding: 1rem 2rem;
      color: white;
      font-weight: bold;
      cursor: pointer;
      transition: all 0.3s ease;
      font-family: inherit;
    }

    .send-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(107, 70, 193, 0.4);
    }

    .send-btn:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none;
    }

    /* File Upload Area */
    .file-upload-area {
      border: 2px dashed rgba(107, 70, 193, 0.5);
      border-radius: 10px;
      padding: 2rem;
      text-align: center;
      background: rgba(107, 70, 193, 0.05);
      transition: all 0.3s ease;
      cursor: pointer;
      margin-bottom: 1rem;
    }

    .file-upload-area:hover {
      border-color: #6B46C1;
      background: rgba(107, 70, 193, 0.1);
    }

    .file-upload-area.dragover {
      border-color: #9333EA;
      background: rgba(147, 51, 234, 0.1);
    }

    .file-input {
      display: none;
    }

    .upload-text {
      color: #c9a9ff;
      margin-bottom: 0.5rem;
    }

    .upload-formats {
      color: #a78bfa;
      font-size: 0.8rem;
    }

    /* Memory Search */
    .search-container {
      margin-bottom: 1.5rem;
    }

    .search-input {
      width: 100%;
      padding: 1rem;
      background: rgba(0, 0, 0, 0.5);
      border: 1px solid rgba(107, 70, 193, 0.3);
      border-radius: 10px;
      color: #c9a9ff;
      font-size: 1rem;
      font-family: inherit;
    }

    .search-input:focus {
      outline: none;
      border-color: #6B46C1;
    }

    .search-results {
      max-height: 300px;
      overflow-y: auto;
      background: rgba(0, 0, 0, 0.3);
      border-radius: 10px;
      border: 1px solid rgba(107, 70, 193, 0.2);
    }

    .search-result {
      padding: 1rem;
      border-bottom: 1px solid rgba(107, 70, 193, 0.1);
      cursor: pointer;
      transition: background 0.2s ease;
    }

    .search-result:hover {
      background: rgba(107, 70, 193, 0.1);
    }

    .search-result:last-child {
      border-bottom: none;
    }

    .result-title {
      color: #c9a9ff;
      font-weight: bold;
      margin-bottom: 0.25rem;
    }

    .result-content {
      color: #a78bfa;
      font-size: 0.9rem;
    }

    .result-meta {
      color: #8b5cf6;
      font-size: 0.8rem;
      margin-top: 0.25rem;
    }

    /* Voice Controls */
    .voice-controls {
      display: flex;
      gap: 1rem;
      margin-bottom: 1rem;
    }

    .voice-btn {
      background: linear-gradient(135deg, #9333EA, #C084FC);
      border: none;
      border-radius: 50%;
      width: 60px;
      height: 60px;
      color: white;
      font-size: 1.5rem;
      cursor: pointer;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .voice-btn:hover {
      transform: scale(1.1);
      box-shadow: 0 5px 15px rgba(147, 51, 234, 0.4);
    }

    .voice-btn.recording {
      background: linear-gradient(135deg, #ef4444, #f87171);
      animation: pulse 2s infinite;
    }

    .voice-status {
      color: #a78bfa;
      font-size: 0.9rem;
      margin-top: 0.5rem;
    }

    .typing-indicator {
      display: none;
      color: #6B46C1;
      font-style: italic;
      padding: 1rem;
    }

    .typing-indicator.active {
      display: block;
    }

    .typing-indicator::after {
      content: '...';
      animation: typing 1.5s infinite;
    }

    @keyframes typing {
      0%, 60% { content: '...'; }
      20% { content: '.'; }
      40% { content: '..'; }
    }

    /* Welcome message */
    .welcome-message {
      color: #a78bfa;
      text-align: center;
      padding: 2rem;
      font-style: italic;
    }

    /* Responsive */
    @media (max-width: 768px) {
      .header-bar {
        padding: 0 1rem;
      }
      
      .header-title {
        font-size: 1.2rem;
      }
      
      .nav-container {
        gap: 0.5rem;
      }
      
      .primary-menu-btn {
        width: 40px;
        height: 40px;
        font-size: 1rem;
      }
      
      .memora-menu-btn {
        padding: 0.5rem 0.75rem;
        font-size: 0.9rem;
      }
      
      .primary-menu-dropdown,
      .memora-dropdown-menu {
        min-width: 180px;
        right: -0.5rem;
      }
      
      .hero-section {
        padding: 6rem 1rem 2rem;
      }
      
      .agent-title {
        font-size: 2rem;
      }
      
      .agent-stats {
        gap: 1rem;
      }

      .memory-container {
        width: 95%;
        padding: 1rem;
      }

      .memory-chat {
        height: 300px;
      }

      .chat-input-area {
        flex-direction: column;
      }

      .memory-tabs {
        flex-wrap: wrap;
      }
    }
  </style>
</head>

<body>
  <!-- Sticky Header Bar -->
  <div class="header-bar">
    <div class="header-title">
      🌌 Memora Memory Hub
    </div>
    
    <div class="nav-container">
      <!-- Memora Agent Navigation -->
      <div class="memora-nav" id="memora-nav">
        <div class="memora-dropdown">
          <button class="memora-menu-btn" onclick="toggleMemoraMenu()">
            🌌 Memora
            <span style="transform: rotate(90deg);">▶</span>
          </button>
          <div class="memora-dropdown-menu" id="memora-menu">
            <div class="memora-menu-header">
              <div class="memora-menu-title">Memora Memory Studio</div>
              <div class="memora-menu-subtitle">AI Memory & Knowledge Management</div>
            </div>
            <div class="memora-menu-item" onclick="openMemoryChat()">
              <span>💬</span> Memory Chat
            </div>
            <div class="memora-menu-item" onclick="openMemorySearch()">
              <span>🔍</span> Search Memories
            </div>
            <div class="memora-menu-item" onclick="openFileProcessor()">
              <span>📁</span> File Processor
            </div>
            <div class="memora-menu-item" onclick="openVoiceMemory()">
              <span>🎤</span> Voice Memory
            </div>
            <div class="memora-menu-item" onclick="openMemoryGraph()">
              <span>🕸️</span> Memory Graph
            </div>
            <div class="memora-menu-item" onclick="openMemoryAnalytics()">
              <span>📊</span> Memory Analytics
            </div>
            <div class="memora-menu-item" onclick="openMemorySettings()">
              <span>⚙️</span> Memory Settings
            </div>
          </div>
        </div>
      </div>

      <!-- Primary Menu (Right Arrow) -->
      <div class="primary-menu">
        <button class="primary-menu-btn" onclick="togglePrimaryMenu()">
          ▶
        </button>
        <div class="primary-menu-dropdown" id="primary-menu">
          <div class="primary-menu-item" onclick="goToHome()">
            <span>🏠</span> Home
          </div>
          <div class="primary-menu-item" onclick="goToAgents()">
            <span>🤖</span> Agents
          </div>
          <div class="primary-menu-item" onclick="goToProfile()">
            <span>👤</span> Profile
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Hero Section -->
  <div class="hero-section">
    <div class="hero-content">
      <div class="agent-logo">🌌</div>
      <h1 class="agent-title">Memora</h1>
      <p class="agent-tagline">AI Memory & Knowledge Management</p>
      <p class="agent-description">
        Advanced memory processing and knowledge organization system. Store, search, and connect memories with voice processing, file handling, and intelligent semantic indexing.
      </p>
      
      <div class="agent-stats">
        <div class="stat-item">
          <span class="stat-value">∞</span>
          <span class="stat-label">Memory Capacity</span>
        </div>
        <div class="stat-item">
          <span class="stat-value">10</span>
          <span class="stat-label">Memory Types</span>
        </div>
        <div class="stat-item">
          <span class="stat-value">AI</span>
          <span class="stat-label">Semantic Search</span>
        </div>
        <div class="stat-item">
          <span class="stat-value">🎤</span>
          <span class="stat-label">Voice Input</span>
        </div>
      </div>
      
      <button class="hero-action" onclick="openMemoryInterface()">
        🧠 Start Memory Session
      </button>
    </div>
  </div>

  <!-- Memory Interface Modal -->
  <div class="memory-modal" id="memory-modal">
    <div class="memory-container">
      <div class="memory-header">
        <div>
          <div class="memory-title">🌌 Memora Memory Interface</div>
          <div class="memory-subtitle">Advanced AI Memory & Knowledge Management</div>
        </div>
        <button class="close-btn" onclick="closeMemoryInterface()">&times;</button>
      </div>

      <!-- Memory Tabs -->
      <div class="memory-tabs">
        <button class="memory-tab active" onclick="switchTab('chat')">💬 Memory Chat</button>
        <button class="memory-tab" onclick="switchTab('search')">🔍 Search</button>
        <button class="memory-tab" onclick="switchTab('files')">📁 Files</button>
        <button class="memory-tab" onclick="switchTab('voice')">🎤 Voice</button>
        <button class="memory-tab" onclick="switchTab('analytics')">📊 Analytics</button>
      </div>

      <!-- Chat Tab -->
      <div class="memory-content active" id="chat-content">
        <div class="memory-chat">
          <div class="chat-messages" id="chat-messages">
            <div class="welcome-message">
              Welcome to Memora! I can help you store, organize, and retrieve memories using advanced AI processing.
              You can chat with me, upload files, use voice commands, or search through your knowledge base.
            </div>
          </div>
          <div class="typing-indicator" id="typing-indicator">
            Memora is thinking
          </div>
          <div class="chat-input-area">
            <textarea class="chat-input" id="chat-input" placeholder="Tell me something to remember, ask a question, or describe what you're looking for..."></textarea>
            <button class="send-btn" onclick="sendMessage()">Send</button>
          </div>
        </div>
      </div>

      <!-- Search Tab -->
      <div class="memory-content" id="search-content">
        <div class="search-container">
          <input type="text" class="search-input" id="search-input" placeholder="Search your memories, knowledge, and stored information...">
        </div>
        <div class="search-results" id="search-results">
          <div class="welcome-message">
            Enter a search query to find relevant memories, documents, and knowledge stored in your Memora system.
          </div>
        </div>
      </div>

      <!-- Files Tab -->
      <div class="memory-content" id="files-content">
        <div class="file-upload-area" onclick="document.getElementById('file-input').click()">
          <div class="upload-text">📁 Drop files here or click to upload</div>
          <div class="upload-formats">Supports: PDF, TXT, DOC, JSON, and more</div>
          <input type="file" id="file-input" class="file-input" multiple accept=".pdf,.txt,.doc,.docx,.json,.csv">
        </div>
        <div id="file-processing-status" style="color: #a78bfa; text-align: center; padding: 1rem;"></div>
        <div id="processed-files" style="max-height: 300px; overflow-y: auto;"></div>
      </div>

      <!-- Voice Tab -->
      <div class="memory-content" id="voice-content">
        <div class="voice-controls">
          <button class="voice-btn" id="record-btn" onclick="toggleRecording()">🎤</button>
        </div>
        <div class="voice-status" id="voice-status">Click the microphone to start voice recording</div>
        <div id="voice-transcript" style="background: rgba(0,0,0,0.3); border-radius: 10px; padding: 1rem; margin-top: 1rem; min-height: 200px; color: #a78bfa;">
          Voice transcription will appear here...
        </div>
      </div>

      <!-- Analytics Tab -->
      <div class="memory-content" id="analytics-content">
        <div style="color: #a78bfa; text-align: center; padding: 2rem;">
          <h3 style="color: #c9a9ff; margin-bottom: 1rem;">🧠 Memory Analytics</h3>
          <p>Coming soon: Detailed analytics about your memory patterns, knowledge graphs, and learning insights.</p>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Menu functionality
    function toggleMemoraMenu() {
      const menu = document.getElementById('memora-menu');
      const primaryMenu = document.getElementById('primary-menu');
      const memoraNav = document.getElementById('memora-nav');
      
      menu.classList.toggle('active');
      
      // Hide primary menu if open
      if (primaryMenu.classList.contains('active')) {
        primaryMenu.classList.remove('active');
      }
    }

    function togglePrimaryMenu() {
      const menu = document.getElementById('primary-menu');
      const memoraMenu = document.getElementById('memora-menu');
      const memoraNav = document.getElementById('memora-nav');
      
      menu.classList.toggle('active');
      
      // Hide Memora menu if open and adjust its z-index
      if (memoraMenu.classList.contains('active')) {
        memoraMenu.classList.remove('active');
      }
      
      // Adjust z-index when primary menu is open
      if (menu.classList.contains('active')) {
        memoraNav.classList.add('hidden-behind-primary');
      } else {
        memoraNav.classList.remove('hidden-behind-primary');
      }
    }

    // Navigation functions
    function goToHome() {
      window.location.href = '/';
    }

    function goToAgents() {
      window.location.href = '/agents';
    }

    function goToProfile() {
      window.location.href = '/profile';
    }

    // Memory interface functions
    function openMemoryInterface() {
      document.getElementById('memory-modal').style.display = 'block';
    }

    function closeMemoryInterface() {
      document.getElementById('memory-modal').style.display = 'none';
    }

    function openMemoryChat() {
      openMemoryInterface();
      switchTab('chat');
    }

    function openMemorySearch() {
      openMemoryInterface();
      switchTab('search');
    }

    function openFileProcessor() {
      openMemoryInterface();
      switchTab('files');
    }

    function openVoiceMemory() {
      openMemoryInterface();
      switchTab('voice');
    }

    function openMemoryGraph() {
      openMemoryInterface();
      switchTab('analytics');
    }

    function openMemoryAnalytics() {
      openMemoryInterface();
      switchTab('analytics');
    }

    function openMemorySettings() {
      alert('Memory settings will be available soon!');
    }

    // Tab switching
    function switchTab(tabName) {
      // Hide all content
      const contents = document.querySelectorAll('.memory-content');
      contents.forEach(content => content.classList.remove('active'));
      
      // Remove active from all tabs
      const tabs = document.querySelectorAll('.memory-tab');
      tabs.forEach(tab => tab.classList.remove('active'));
      
      // Show selected content
      document.getElementById(tabName + '-content').classList.add('active');
      
      // Highlight selected tab
      event.target.classList.add('active');
    }

    // Chat functionality
    async function sendMessage() {
      const input = document.getElementById('chat-input');
      const message = input.value.trim();
      
      if (!message) return;
      
      // Add user message
      addMessage('user', 'You', message);
      input.value = '';
      
      // Show typing indicator
      showTyping(true);
      
      try {
        const response = await fetch('/memora/chat', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
          },
          body: JSON.stringify({ message: message })
        });
        
        const data = await response.json();
        
        // Hide typing indicator
        showTyping(false);
        
        // Add AI response
        addMessage('ai', 'Memora', data.response || 'I received your message and stored it in memory.');
        
      } catch (error) {
        showTyping(false);
        addMessage('ai', 'Memora', 'Sorry, I encountered an error. Please try again.');
      }
    }

    function addMessage(type, sender, content) {
      const messagesDiv = document.getElementById('chat-messages');
      const messageDiv = document.createElement('div');
      messageDiv.className = `message ${type}`;
      messageDiv.innerHTML = `
        <div class="message-header">${sender}</div>
        <div class="message-content">${content}</div>
      `;
      messagesDiv.appendChild(messageDiv);
      messagesDiv.scrollTop = messagesDiv.scrollHeight;
    }

    function showTyping(show) {
      const indicator = document.getElementById('typing-indicator');
      if (show) {
        indicator.classList.add('active');
      } else {
        indicator.classList.remove('active');
      }
    }

    // File upload
    document.getElementById('file-input').addEventListener('change', async function(e) {
      const files = e.target.files;
      const statusDiv = document.getElementById('file-processing-status');
      
      for (let file of files) {
        statusDiv.innerHTML = `Processing ${file.name}...`;
        
        const formData = new FormData();
        formData.append('file', file);
        
        try {
          const response = await fetch('/memora/upload_file', {
            method: 'POST',
            headers: {
              'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
            },
            body: formData
          });
          
          const data = await response.json();
          statusDiv.innerHTML = `✅ ${file.name} processed successfully`;
          
        } catch (error) {
          statusDiv.innerHTML = `❌ Error processing ${file.name}`;
        }
      }
    });

    // Voice recording
    let isRecording = false;
    let mediaRecorder;

    async function toggleRecording() {
      const recordBtn = document.getElementById('record-btn');
      const statusDiv = document.getElementById('voice-status');
      
      if (!isRecording) {
        try {
          const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
          mediaRecorder = new MediaRecorder(stream);
          
          mediaRecorder.start();
          isRecording = true;
          
          recordBtn.classList.add('recording');
          statusDiv.innerHTML = 'Recording... Click to stop';
          
          mediaRecorder.ondataavailable = async function(e) {
            if (e.data.size > 0) {
              const formData = new FormData();
              formData.append('audio', e.data, 'recording.wav');
              
              try {
                const response = await fetch('/memora/voice_input', {
                  method: 'POST',
                  headers: {
                    'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
                  },
                  body: formData
                });
                
                const data = await response.json();
                document.getElementById('voice-transcript').innerHTML = data.transcript || 'Transcription failed';
                
              } catch (error) {
                document.getElementById('voice-transcript').innerHTML = 'Error processing voice input';
              }
            }
          };
          
        } catch (error) {
          statusDiv.innerHTML = 'Error accessing microphone';
        }
      } else {
        mediaRecorder.stop();
        mediaRecorder.stream.getTracks().forEach(track => track.stop());
        
        isRecording = false;
        recordBtn.classList.remove('recording');
        statusDiv.innerHTML = 'Processing voice input...';
      }
    }

    // Search functionality
    document.getElementById('search-input').addEventListener('input', async function(e) {
      const query = e.target.value.trim();
      
      if (query.length < 3) return;
      
      try {
        const response = await fetch('/memora/knowledge_retrieval', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
          },
          body: JSON.stringify({ query: query })
        });
        
        const data = await response.json();
        displaySearchResults(data.results || []);
        
      } catch (error) {
        console.error('Search error:', error);
      }
    });

    function displaySearchResults(results) {
      const resultsDiv = document.getElementById('search-results');
      
      if (results.length === 0) {
        resultsDiv.innerHTML = '<div class="welcome-message">No results found</div>';
        return;
      }
      
      resultsDiv.innerHTML = results.map(result => `
        <div class="search-result">
          <div class="result-title">${result.title || 'Memory'}</div>
          <div class="result-content">${result.content || result.text}</div>
          <div class="result-meta">Type: ${result.type || 'unknown'} | Confidence: ${result.confidence || 'N/A'}</div>
        </div>
      `).join('');
    }

    // Enter key handling
    document.getElementById('chat-input').addEventListener('keypress', function(e) {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        sendMessage();
      }
    });

    // Close modal when clicking outside
    window.addEventListener('click', function(e) {
      const modal = document.getElementById('memory-modal');
      if (e.target === modal) {
        closeMemoryInterface();
      }
    });

    // Close dropdowns when clicking outside
    document.addEventListener('click', function(e) {
      if (!e.target.closest('.memora-dropdown') && !e.target.closest('.primary-menu')) {
        document.getElementById('memora-menu').classList.remove('active');
        document.getElementById('primary-menu').classList.remove('active');
        document.getElementById('memora-nav').classList.remove('hidden-behind-primary');
      }
    });
  </script>
</body>
</html>