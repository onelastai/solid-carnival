<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Memora - AI Memory & Knowledge Management | OneLast.AI</title>
  
  <%= csrf_meta_tags %>
  <%= csp_meta_tag %>
  
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'JetBrains Mono', 'Consolas', 'Monaco', monospace;
      background: linear-gradient(135deg, #1e1b3d 0%, #2d1b4e 25%, #4a1e4a 50%, #2d1b4e 75%, #1e1b3d 100%);
      color: #c9a9ff;
      min-height: 100vh;
      overflow-x: hidden;
      position: relative;
      animation: backgroundShift 30s ease-in-out infinite;
    }

    @keyframes backgroundShift {
      0%, 100% { filter: hue-rotate(0deg) brightness(1); }
      25% { filter: hue-rotate(10deg) brightness(1.1); }
      50% { filter: hue-rotate(-5deg) brightness(0.9); }
      75% { filter: hue-rotate(15deg) brightness(1.05); }
    }
    
    /* Memory particle effect */
    body::before {
      content: '';
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: radial-gradient(2px 2px at 20px 30px, #6B46C1, transparent),
                  radial-gradient(2px 2px at 40px 70px, #9333EA, transparent),
                  radial-gradient(1px 1px at 90px 40px, #C084FC, transparent),
                  radial-gradient(1px 1px at 130px 80px, #8B5CF6, transparent);
      background-repeat: repeat;
      background-size: 200px 200px;
      pointer-events: none;
      z-index: 1;
      animation: memorySpark 15s linear infinite;
    }
    
    @keyframes memorySpark {
      0% { transform: translate(0, 0); opacity: 0.3; }
      50% { opacity: 0.1; }
      100% { transform: translate(-200px, -200px); opacity: 0.3; }
    }

    /* Hero Section */
    .hero-section {
      padding: 4rem 2rem;
      text-align: center;
      background: radial-gradient(ellipse at center, rgba(107, 70, 193, 0.1) 0%, rgba(0, 0, 0, 0.3) 70%);
      border-bottom: 2px solid #6B46C1;
      position: relative;
      z-index: 2;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      justify-content: center;
    }
    
    .hero-section::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-image: 
        linear-gradient(rgba(107, 70, 193, 0.1) 1px, transparent 1px),
        linear-gradient(90deg, rgba(107, 70, 193, 0.1) 1px, transparent 1px);
      background-size: 20px 20px;
      opacity: 0.3;
      animation: gridMove 20s linear infinite;
    }
    
    @keyframes gridMove {
      0% { transform: translate(0, 0); }
      100% { transform: translate(10px, 10px); }
    }
    
    .hero-content {
      position: relative;
      z-index: 1;
    }
    
    .agent-logo {
      font-size: 4rem;
      margin-bottom: 1rem;
      text-shadow: 0 0 20px #6B46C1;
      animation: memoryPulse 3s infinite;
    }
    
    @keyframes memoryPulse {
      0%, 100% { transform: scale(1); opacity: 1; }
      50% { transform: scale(1.05); opacity: 0.9; text-shadow: 0 0 30px #6B46C1; }
    }
    
    .agent-title {
      font-size: 3rem;
      font-weight: bold;
      margin-bottom: 0.5rem;
      text-shadow: 0 0 10px #6B46C1;
      background: linear-gradient(45deg, #6B46C1, #C084FC);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }
    
    .agent-tagline {
      font-size: 1.2rem;
      color: #a78bfa;
      margin-bottom: 2rem;
      opacity: 0.9;
    }
    
    .agent-description {
      max-width: 600px;
      margin: 0 auto 2rem;
      color: #c9a9ff;
      line-height: 1.6;
      font-size: 1rem;
    }
    
    .agent-stats {
      display: flex;
      justify-content: center;
      gap: 2rem;
      margin-top: 2rem;
      flex-wrap: wrap;
    }
    
    .stat-item {
      background: rgba(107, 70, 193, 0.1);
      border: 1px solid #6B46C1;
      border-radius: 8px;
      padding: 1rem;
      min-width: 120px;
      text-align: center;
    }
    
    .stat-value {
      font-size: 1.5rem;
      font-weight: bold;
      color: #C084FC;
      display: block;
    }
    
    .stat-label {
      font-size: 0.8rem;
      color: #a78bfa;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    /* Start Memory Button */
    .hero-action {
      background: linear-gradient(135deg, #6B46C1 0%, #9333EA 50%, #8B5CF6 100%);
      border: none;
      padding: 1rem 2rem;
      border-radius: 25px;
      color: white;
      font-size: 1.1rem;
      font-weight: bold;
      cursor: pointer;
      transition: all 0.3s ease;
      margin: 2rem auto;
      text-transform: uppercase;
      letter-spacing: 1px;
      text-decoration: none;
      display: inline-block;
    }

    .hero-action:hover {
      transform: translateY(-3px) scale(1.05);
      box-shadow: 0 10px 30px rgba(107, 70, 193, 0.6);
      filter: brightness(1.1);
      color: white;
      text-decoration: none;
    }

    /* Navigation Links */
    .nav-links {
      display: flex;
      justify-content: center;
      gap: 2rem;
      margin-top: 2rem;
      flex-wrap: wrap;
    }

    .nav-link {
      background: rgba(107, 70, 193, 0.1);
      border: 1px solid #6B46C1;
      border-radius: 8px;
      padding: 1rem 1.5rem;
      color: #c9a9ff;
      text-decoration: none;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .nav-link:hover {
      background: rgba(107, 70, 193, 0.2);
      color: #f3e8ff;
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(107, 70, 193, 0.3);
    }

    /* Responsive */
    @media (max-width: 768px) {
      .hero-section {
        padding: 2rem 1rem;
      }
      
      .agent-title {
        font-size: 2rem;
      }
      
      .agent-stats {
        gap: 1rem;
      }

      .nav-links {
        gap: 1rem;
      }
    }
  </style>
</head>

<body>
  <!-- Hero Section -->
  <div class="hero-section">
    <div class="hero-content">
      <div class="agent-logo">üåå</div>
      <h1 class="agent-title">Memora</h1>
      <p class="agent-tagline">AI Memory & Knowledge Management</p>
      <p class="agent-description">
        Advanced memory processing and knowledge organization system. Store, search, and connect memories with voice processing, file handling, and intelligent semantic indexing.
      </p>
      
      <div class="agent-stats">
        <div class="stat-item">
          <span class="stat-value">‚àû</span>
          <span class="stat-label">Memory Capacity</span>
        </div>
        <div class="stat-item">
          <span class="stat-value">10</span>
          <span class="stat-label">Memory Types</span>
        </div>
        <div class="stat-item">
          <span class="stat-value">AI</span>
          <span class="stat-label">Semantic Search</span>
        </div>
        <div class="stat-item">
          <span class="stat-value">üé§</span>
          <span class="stat-label">Voice Input</span>
        </div>
      </div>
      
      <a href="/memora/interface" class="hero-action">
        üåå Enter Memory Interface
      </a>

      <div class="nav-links">
        <a href="/" class="nav-link">
          <span>üè†</span> Home
        </a>
        <a href="/agents" class="nav-link">
          <span>ü§ñ</span> Agents
        </a>
        <a href="/profile" class="nav-link">
          <span>üë§</span> Profile
        </a>
      </div>
    </div>
  </div>

  <script>
    // Add some interactive effects
    document.addEventListener('mousemove', function(e) {
      const particles = document.querySelector('body::before');
      if (particles) {
        const x = e.clientX / window.innerWidth;
        const y = e.clientY / window.innerHeight;
        document.body.style.setProperty('--mouse-x', x);
        document.body.style.setProperty('--mouse-y', y);
      }
    });

    // Add click effect to stats
    document.querySelectorAll('.stat-item').forEach(item => {
      item.addEventListener('click', function() {
        this.style.transform = 'scale(1.1)';
        setTimeout(() => {
          this.style.transform = '';
        }, 200);
      });
    });
  </script>
</body>
</html>