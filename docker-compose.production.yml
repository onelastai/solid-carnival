# OneLastAI Production Docker Compose for onelastai.com
# Complete production stack with all services

version: '3.8'

services:
  # Main Rails Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: onelastai_app
    restart: unless-stopped
    environment:
      - RAILS_ENV=production
      - DOMAIN_NAME=onelastai.com
      - DATABASE_URL=postgresql://onelastai:${POSTGRES_PASSWORD}@postgres:5432/onelastai_production
      - REDIS_URL=redis://redis:6379/0
      - MONGODB_URI=mongodb://mongodb:27017/onelastai_production
    volumes:
      - app_storage:/app/storage
      - app_logs:/app/log
      - ./config/master.key:/app/config/master.key:ro
    depends_on:
      - postgres
      - redis
      - mongodb
    networks:
      - onelastai_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # NGINX Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: onelastai_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/onelastai.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - app_storage:/var/www/html/storage:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - onelastai_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: onelastai_postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=onelastai_production
      - POSTGRES_USER=onelastai
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups
      - ./config/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - onelastai_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U onelastai -d onelastai_production"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB for AI Data
  mongodb:
    image: mongo:7.0
    container_name: onelastai_mongodb
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=onelastai
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
      - MONGO_INITDB_DATABASE=onelastai_production
    volumes:
      - mongodb_data:/data/db
      - mongodb_backups:/backups
      - ./config/mongodb/mongod.conf:/etc/mongod.conf:ro
    networks:
      - onelastai_network
    command: --config /etc/mongod.conf
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Caching and Sessions
  redis:
    image: redis:7-alpine
    container_name: onelastai_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - onelastai_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Sidekiq Background Jobs
  sidekiq:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: onelastai_sidekiq
    restart: unless-stopped
    environment:
      - RAILS_ENV=production
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - app_storage:/app/storage
      - app_logs:/app/log
      - ./config/master.key:/app/config/master.key:ro
    depends_on:
      - postgres
      - redis
      - mongodb
    networks:
      - onelastai_network
    command: bundle exec sidekiq -C config/sidekiq.yml
    healthcheck:
      test: ["CMD", "pgrep", "-f", "sidekiq"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Log Aggregation
  fluentd:
    image: fluent/fluentd:v1.16-debian
    container_name: onelastai_fluentd
    restart: unless-stopped
    volumes:
      - ./config/fluentd:/fluentd/etc
      - app_logs:/fluentd/log/app
      - nginx_logs:/fluentd/log/nginx
    networks:
      - onelastai_network
    depends_on:
      - app
      - nginx

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: onelastai_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - onelastai_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: onelastai_grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SERVER_DOMAIN=monitoring.onelastai.com
      - GF_SERVER_ROOT_URL=https://monitoring.onelastai.com
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - onelastai_network
    depends_on:
      - prometheus

  # Backup Service
  backup:
    image: alpine:latest
    container_name: onelastai_backup
    restart: "no"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET=onelastai-backups
    volumes:
      - postgres_backups:/backup/postgres
      - mongodb_backups:/backup/mongodb
      - app_storage:/backup/storage:ro
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - onelastai_network
    depends_on:
      - postgres
      - mongodb
    command: /bin/sh -c "while true; do sleep 86400; done"  # Keep container running

networks:
  onelastai_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  app_storage:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local
  postgres_backups:
    driver: local
  mongodb_backups:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
